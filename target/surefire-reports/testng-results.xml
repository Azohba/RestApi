<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="7" passed="6" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2022-10-05T23:08:54 TRT" name="Surefire suite" finished-at="2022-10-05T23:09:34 TRT" duration-ms="39454">
    <groups>
    </groups>
    <test started-at="2022-10-05T23:08:54 TRT" name="Surefire test" finished-at="2022-10-05T23:09:34 TRT" duration-ms="39454">
      <class name="services.pet.DeletePetTest">
        <test-method is-config="true" signature="beforeTest()[pri:0, instance:services.pet.DeletePetTest@77a57272]" started-at="2022-10-05T23:08:54 TRT" name="beforeTest" finished-at="2022-10-05T23:08:56 TRT" duration-ms="2073" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="deletePetHappyPath()[pri:0, instance:services.pet.DeletePetTest@77a57272]" started-at="2022-10-05T23:08:58 TRT" name="deletePetHappyPath" finished-at="2022-10-05T23:08:58 TRT" duration-ms="609" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [405]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [405]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at services.pet.DeletePetTest.deletePetHappyPath(DeletePetTest.java:24)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deletePetHappyPath -->
      </class> <!-- services.pet.DeletePetTest -->
      <class name="services.pet.FindPetByStatusTest">
        <test-method signature="findPetByStatusCheckWithInvalidStatus()[pri:0, instance:services.pet.FindPetByStatusTest@7181ae3f]" started-at="2022-10-05T23:08:58 TRT" name="findPetByStatusCheckWithInvalidStatus" finished-at="2022-10-05T23:08:59 TRT" duration-ms="532" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- findPetByStatusCheckWithInvalidStatus -->
        <test-method signature="findPetByStatusCheckWithNullStatus()[pri:0, instance:services.pet.FindPetByStatusTest@7181ae3f]" started-at="2022-10-05T23:08:59 TRT" name="findPetByStatusCheckWithNullStatus" finished-at="2022-10-05T23:08:59 TRT" duration-ms="539" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- findPetByStatusCheckWithNullStatus -->
        <test-method signature="findPetByStatusCheckWithWhiteSpaceStatus()[pri:0, instance:services.pet.FindPetByStatusTest@7181ae3f]" started-at="2022-10-05T23:09:00 TRT" name="findPetByStatusCheckWithWhiteSpaceStatus" finished-at="2022-10-05T23:09:00 TRT" duration-ms="536" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- findPetByStatusCheckWithWhiteSpaceStatus -->
        <test-method signature="findPetByStatusHappyPath()[pri:0, instance:services.pet.FindPetByStatusTest@7181ae3f]" started-at="2022-10-05T23:09:00 TRT" name="findPetByStatusHappyPath" finished-at="2022-10-05T23:09:33 TRT" duration-ms="32586" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- findPetByStatusHappyPath -->
      </class> <!-- services.pet.FindPetByStatusTest -->
      <class name="services.pet.UpdatePetTest">
        <test-method is-config="true" signature="beforeTest()[pri:0, instance:services.pet.UpdatePetTest@46238e3f]" started-at="2022-10-05T23:08:56 TRT" name="beforeTest" finished-at="2022-10-05T23:08:57 TRT" duration-ms="567" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="updatePetHappyPath()[pri:0, instance:services.pet.UpdatePetTest@46238e3f]" started-at="2022-10-05T23:09:33 TRT" name="updatePetHappyPath" finished-at="2022-10-05T23:09:33 TRT" duration-ms="550" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updatePetHappyPath -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:services.pet.UpdatePetTest@46238e3f]" started-at="2022-10-05T23:09:33 TRT" name="afterTest" finished-at="2022-10-05T23:09:34 TRT" duration-ms="533" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
      </class> <!-- services.pet.UpdatePetTest -->
      <class name="services.pet.CreatePetTest">
        <test-method signature="createPetHappyPath()[pri:0, instance:services.pet.CreatePetTest@4b53f538]" started-at="2022-10-05T23:08:57 TRT" name="createPetHappyPath" finished-at="2022-10-05T23:08:58 TRT" duration-ms="900" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createPetHappyPath -->
      </class> <!-- services.pet.CreatePetTest -->
    </test> <!-- Surefire test -->
  </suite> <!-- Surefire suite -->
</testng-results>
